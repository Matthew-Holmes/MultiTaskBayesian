#include "OptimisationLogger.hpp"

#include "Rastrigin.hpp"
#include "Rosenbrock.hpp"
#include "Cone.hpp"
#include "Parabola.hpp"

#include "NelderMead.hpp"
#include "Bayesian.hpp"
#include "BayesianCUDA.hpp"

#include <iostream>
#include <float.h>
#include <vector>
#include <string>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <filesystem>


void saveLogsToFile(
    const std::vector<std::vector<double>> &logs,
    const std::string& filename); 

void copyGeneratedLogFile(const std::string& dest_filename);

int main() {
    NelderMead nm;
    Bayesian bay;
    BayesianCUDA bayC;
    Rosenbrock rosenbrock;
    Rastrigin rastrigin;
    Cone cone;
    Parabola parabola;

    OptimisationLogger logger;


    // grid (polymorphism)
    std::vector<std::pair<OptimiserBase*, std::string>> optimisers = {
        {&nm,   "NelderMead" },
        {&bay,  "BayesianCPU"},
        {&bayC, "BayesianGPU"} };

    std::vector<std::pair<FunctionBase*, std::string>> functions = {
        {&cone,       "cone"      },
        {&parabola,   "parabola"  },
        {&rosenbrock, "rosenbrock"},
        {&rastrigin,  "rastrigin" } };

    std::vector<int> dimensions = {
        100, 50, 25, 16, 12, 10, 8, 6, 5, 4, 3, 2, 1};

    int repeats         = 5;

    // hyperparams
    int iterations      = 1000;
    int time_per_it_ms  = 20;


    for (int    dim            : dimensions) {
    for (auto&  merit_pair     : functions)  {
    for (auto&  optimiser_pair : optimisers) { 

        if (dim == 1 && merit_pair.second == "rosenbrock")
            continue; // not defined in 1D

        for (int repeat = 0; repeat != repeats; ++repeat) {

            std::string step_name = 
                               optimiser_pair.second
                    + "_"    + merit_pair.second
                    + "_dim" + std::to_string(dim) 
                    + "_rep" + std::to_string(repeat);
            
            std::cout << "Running " << step_name << std::endl;

            std::vector<std::vector<double>> logs = 
                logger.GetEvalsFor(
                   *optimiser_pair.first,
                   *merit_pair.first,
                    dim,
                    iterations,
                    time_per_it_ms);
            
            std::string filename = "outputs/" + step_name + ".txt";
            saveLogsToFile(logs,filename);

            if (optimiser_pair.second != "NelderMead")
                copyGeneratedLogFile("outputs/" + step_name + "_logs.txt");

        }
    }}}
    
    return 0;
}


void saveLogsToFile(
    const std::vector<std::vector<double>> &logs,
    const std::string& filename) {

    std::ofstream outfile(filename);
    for (const auto& vec : logs) {
        for (double x : vec) {
            outfile << x << " ";
        }
        outfile << "\n";
    }
    outfile.close();
}

void copyGeneratedLogFile(const std::string& dest_filename) {
    // copy the log file generated by the optimisation policy
    std::string source_filename = "logs.txt"; 
    if (std::filesystem::exists(source_filename)) {
        std::filesystem::copy(source_filename, dest_filename);
    } else {
        std::cerr << "Warning: " << source_filename << "does not exist"
                  << std::endl;
    }
}















